#include "he_utils.js"
#include "he_edit.hejs"

Application.AddScriptInfo("5B252184-2714-4E42-B9E4-2352C704DDAE", "ShortKeys", "1.0.0.2", "ShortKeys extensions for HippoEDIT", "HippoEDIT.com", "supportbox@hippoedit.com", "http://wiki.hippoedit.com/plugins/shortkeys");

function onComment(oView, nKey, bUp, bShift, bControl, bAlt) {
	var sel = oView.Selection;
	if (!sel.IsEmpty) {
		var oDoc = oView.Document;
		AdjustSelection(oDoc, sel);

		var text = oDoc.GetText(sel);
		var uncomment = text.match(/\/\*[\s\S]+?\*\//);
		if (sel.Height > 0) {
			if (nKey == "*") {
				if (uncomment) {
					oDoc.ReplaceText(sel, text.replace(/\/\*(?:\r\n|\n\r|\n)?([\s\S]+?)(?:\r\n|\n\r|\n)?\*\//, "$1"), AddUndoActionType("Uncomment selection"));
				} else {
					oDoc.ReplaceText(sel, "/*" + oDoc.LineBreak + text + oDoc.LineBreak + "*/", AddUndoActionType("Comment selection"));
				}
			} else {
				sel.Left = 0; // adjust to line selection
				var lines = ax2js(oDoc.GetLines(sel));
				// we need to do recheck with line comments here
				uncomment = lines[0].substr(0, 2) == "//";
				if (uncomment) // first line
				{
					text = "";
					for (i = 0; i < lines.length; i++) {
						if (lines[i].substr(0, 2) == "//") text += lines[i].substr(2);
					}
					oDoc.ReplaceText(sel, text, AddUndoActionType("Uncomment selection"));
				} else {
					text = "";
					for (i = 0; i < lines.length; i++){
						if (!isWhiteText(lines[i])) {
							text += "//" + lines[i];
						}						
					}					
					oDoc.ReplaceText(sel, text, AddUndoActionType("Comment selection"));
				}

			}
		} else {
			if (uncomment) oDoc.ReplaceText(sel, text.substring(2, text.length - 2), AddUndoActionType("Uncomment selection"));
			else oDoc.ReplaceText(sel, "/*" + text + "*/", AddUndoActionType("Comment selection"));
		}
		return true;
	}
	return false;
}

function onSharp(oView, nKey, bUp, bShift, bControl, bAlt) {
	var sel = oView.Selection;
	if (!sel.IsEmpty) {
		var oDoc = oView.Document;
		AdjustSelection(oDoc, sel);
		var text = oDoc.GetText(sel);
		oDoc.ReplaceText(sel, "#ifdef " + oDoc.LineBreak + text + oDoc.LineBreak + "#endif", AddUndoActionType("Add preprocessor"));
		oView.Position = new Position(sel.Top, sel.Left + 7);
		return true;
	}
	return false;
}

function hungarianHelper(oView, nKey, bUp, bShift, bControl, bAlt) {
	if ( bUp == false )
	{
		var line = oView.Document.GetLine(oView.Position.Line);
		if ( oView.Position.Pos && line.charAt(oView.Position.Pos - 1) == "m" ) {
			oView.Document.InsertText(oView.Position, "_", AddUndoActionType("Insert _ after m and Shift"));
			oView.Selection = new Range(oView.Position.Line, oView.Position.Pos-1, oView.Position.Line, oView.Position.Pos);
	  		return true;
		}
	}
	else
	{
		if ( oView.Document.GetText(oView.Selection) == "_" )
		{
			oView.Selection = new Range(oView.Selection.End.Line, oView.Selection.End.Pos, oView.Selection.End.Line, oView.Selection.End.Pos);
 			return true;
		}
	}
	return false;
}

function onNewLine(oView, nKey, bUp, bShift, bControl, bAlt) {
	if (oView.Selection.IsEmpty) {
		var style_range = oView.Document.GetStyleFromPos(oView.Position);
		if (style_range.Style.ID == "comment") {
			var indent = "";
			if (oView.Position.Line) {
				var line = oView.Document.GetLine(oView.Position.Line);
				for (var i = 0; i < line.length && (line[i] == " " || line[i] == "\t"); i++) {
					indent += line[i];
				}
			}
			oView.Document.InsertText(oView.Position, oView.Document.LineBreak + indent + "* ", AddUndoActionType("Smart Block Comment"));
			return true;
		}
	}
	return false;
}

var oComment = new ShortKey(onComment);
var oSharp = new ShortKey(onSharp);
var oHungarian = new ShortKey(hungarianHelper);
var oNewLine = new ShortKey(onNewLine);
Application.RegisterShortKey("*", oComment, "cbased");
Application.RegisterShortKey("/", oComment, "cbased");
Application.RegisterShortKey(0x0D, oNewLine, "cbased"); // VK_ENTER
Application.RegisterShortKey("*", oComment, "js");
Application.RegisterShortKey("/", oComment, "js");
Application.RegisterShortKey("*", oComment, "php");
Application.RegisterShortKey("/", oComment, "php");
Application.RegisterShortKey("#", oSharp, "cpp");
Application.RegisterShortKey(0x10, oHungarian, "cpp"); // VK_SHIFT